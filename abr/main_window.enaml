from enaml.application import deferred_call
from enaml.layout.api import InsertItem, InsertTab
from enaml.stdlib.message_box import critical
from enaml.widgets.api import MainWindow, DockArea, DockItem, PushButton, Container, MPLCanvas, Feature

from abr.parsers import registry


def bind(figure, presenter):
    figure.canvas.mpl_connect('button_press_event',
                              lambda e: onclick(presenter, e))
    figure.canvas.mpl_connect('key_press_event',
                              lambda e: onpress(presenter, e))


def onclick(presenter, event):
    pass


def onpress(presenter, event):
    try:
        _onpress(presenter, event)
    except Exception as e:
        critical(None, 'Error', str(e))


def _onpress(presenter, event):
    if event.key == 'down':
        presenter.current -= 1
    elif event.key == 'up':
        presenter.current += 1
    elif event.key == 't':
        presenter.set_threshold()
    elif event.key == 'alt+up':
        presenter.set_subthreshold()
    elif event.key == 'alt+down':
        presenter.set_suprathreshold()
    elif event.key in ('-', '_'):
        presenter.scale *= 1.1
    elif event.key in ('=', '+'):
        presenter.scale *= 0.9
    elif event.key == 'd':
        presenter.delete()
    elif event.key == 'i':
        if not presenter.P:
            presenter.guess_p()
        elif not presenter.N:
            presenter.guess_n()
    elif event.key == 'u':
        presenter.update_point()
    elif event.key == 's':
        presenter.save()
    elif event.key == 'right':
        presenter.move_selected_point(('zc', 1))
    elif event.key == 'left':
        presenter.move_selected_point(('zc', -1))
    elif event.key == 'alt+right':
        presenter.move_selected_point(('index', 1))
    elif event.key == 'alt+left':
        presenter.move_selected_point(('index', -1))
    elif event.key == 'n':
        presenter.normalized = not presenter.normalized
    elif event.key in ('1', '2', '3', '4', '5'):
        presenter.toggle = 'PEAK', int(event.key)
    elif event.key in ('alt+1', 'alt+2', 'alt+3', 'alt+4', 'alt+5'):
        presenter.toggle = 'VALLEY', int(event.key[-1])


enamldef SerialWindow(MainWindow):

    attr presenter
    initial_size = (600, 900)

    Container:
        MPLCanvas: canvas:
            figure << presenter.figure
            toolbar_visible = False
            initialized ::
                deferred_call(bind, figure, presenter)


#enamldef MPLDockItem(DockItem):
#
#    alias figure: canvas.figure
#
#    Container:
#        MPLCanvas: canvas:
#            toolbar_visible = False
#            figure << model.figure
#            figure ::
#                print('figure changed')
#

#enamldef Main(MainWindow):
#
#    Container:
#
#        PushButton:
#            clicked::
#                items = dock_area.dock_items()
#                n_items = len(items)
#
#                target = items[-1].name if n_items else ''
#                item = MPLDockItem(dock_area, name='foo{}'.format(n_items), title='Bar{}'.format(n_items))
#
#                item.figure = figure()
#                ax = item.figure.add_subplot(111)
#                ax.plot([0, 1], [0, 1], 'k-')
#
#                op = InsertTab(item=item.name, target=target)
#                dock_area.update_layout(op)
#
#        DockArea: dock_area:
#            features = Feature.DropEnabled
#
#            drag_enter => (event):
#                if event.mime_data().has_format('text/uri-list'):
#                    event.accept_proposed_action()
#
#            drop => (event):
#                text = event.mime_data().data('text/uri-list').strip()
#                filenames = [t.strip() for t in text.split('\n')]
#                models = registry.load(filenames[0])
#                print(models)
