import os.path
import urllib

from enaml.application import deferred_call
from enaml.layout.api import InsertItem, InsertTab
from enaml.stdlib.message_box import critical
from enaml.widgets.api import (CheckBox, DockArea, DockItem, PushButton,
                               Container, MPLCanvas, Feature, ProgressBar,
                               Label, HGroup, MainWindow, VGroup)

from .datatype import Point


def bind(figure, presenter):
    interactor = Interactor(presenter)
    figure.canvas.mpl_connect('button_press_event', lambda e: interactor.button_press(e))
    figure.canvas.mpl_connect('button_release_event', lambda e: interactor.button_release(e))
    figure.canvas.mpl_connect('motion_notify_event', lambda e: interactor.motion_notify(e))
    figure.canvas.mpl_connect('key_press_event', lambda e: interactor.key_press(e))


class Interactor:

    def __init__(self, presenter):
        self.button_down = False
        self.presenter = presenter

    def button_press(self, event):
        self.button_down = True
        self.presenter.set_selected_point(event.xdata)

    def button_release(self, event):
        self.button_down = False

    def motion_notify(self, event):
        if self.button_down:
            self.presenter.set_selected_point(event.xdata)

    def key_press(self, event):
        try:
            if event.key == 'down':
                self.presenter.current -= 1
            elif event.key == 'up':
                self.presenter.current += 1
            elif event.key == 't':
                self.presenter.set_threshold()
            elif event.key == 'alt+up':
                self.presenter.set_subthreshold()
            elif event.key == 'alt+down':
                self.presenter.set_suprathreshold()
            elif event.key in ('-', '_'):
                self.presenter.scale *= 1.1
            elif event.key in ('=', '+'):
                self.presenter.scale *= 0.9
            elif event.key == 'i':
                self.presenter.guess()
            elif event.key == 'u':
                self.presenter.update_point()
            elif event.key == 's':
                self.presenter.save()
            elif event.key == 'right':
                self.presenter.move_selected_point(('zero_crossing', 1))
            elif event.key == 'left':
                self.presenter.move_selected_point(('zero_crossing', -1))
            elif event.key == 'alt+right':
                self.presenter.move_selected_point(('time', 1e-5))
            elif event.key == 'alt+left':
                self.presenter.move_selected_point(('time', -1e-5))
            elif event.key == 'n':
                self.presenter.normalized = not self.presenter.normalized
            elif event.key in ('1', '2', '3', '4', '5'):
                self.presenter.toggle = int(event.key), Point.PEAK
            elif event.key in ('alt+1', 'alt+2', 'alt+3', 'alt+4', 'alt+5'):
                self.presenter.toggle = int(event.key[-1]), Point.VALLEY
            elif event.key == 'pagedown':
                self.presenter.load_next()
            elif event.key == 'pageup':
                self.presenter.load_prior()
        except Exception as e:
            critical(None, 'Error', str(e))


def get_title(frequency, filename, show_filename):
    if show_filename:
        filename = os.path.split(os.path.split(filename)[0])[1]
        return '{} kHz: {}'.format(frequency, filename)
    else:
        return '{} kHz'.format(frequency)


enamldef SerialWindow(MainWindow):

    attr presenter
    initial_size = (600, 900)
    title << get_title(presenter.model.freq, presenter.model.filename,
                       show_filename.checked)

    Container:

        HGroup:
            VGroup:
                Label:
                    text = 'Progress (n={})'.format(len(presenter.unprocessed))
                ProgressBar:
                    value << presenter.current_model
                    maximum << len(presenter.unprocessed)
                    text_visible = True
            VGroup:
                PushButton:
                    text = 'All above threshold'
                    clicked ::
                        presenter.set_suprathreshold()
                PushButton:
                    text = 'All below threshold'
                    clicked ::
                        presenter.set_subthreshold()

            VGroup:
                CheckBox: show_filename:
                    checked = False
                    text = 'Show filename'

        MPLCanvas: canvas:
            figure << presenter.figure
            toolbar_visible = False
            initialized ::
                deferred_call(bind, figure, presenter)


enamldef MPLDockItem(DockItem):

    attr presenter

    Container:
        MPLCanvas: canvas:
            figure << presenter.figure
            toolbar_visible = False
            initialized ::
                deferred_call(bind, figure, presenter)


def add_dock_item(dock_area, model, path, presenter):
    items = dock_area.dock_items()
    n_items = len(items)
    target = items[-1].name if n_items else ''
    title = '{:.2f} kHz - {}'.format(model.freq, os.path.basename(path))
    item = MPLDockItem(dock_area,
                       name='dock_{}'.format(n_items),
                       title=title,
                       presenter=presenter)
    op = InsertTab(item=item.name, target=target)
    dock_area.update_layout(op)


def load_files(parser, latencies, filenames, dock_area):
    from abr.presenter import WaveformPresenter
    for filename in filenames:
        for model in parser.load(filename):
            try:
                presenter = WaveformPresenter(parser, latencies)
                add_dock_item(dock_area, model, filename, presenter)
                presenter.load(model)
            except FileNotFoundError:
                mesg = 'Could not load ABR data from {}'.format(path)
                critical(None, 'Could not load file', mesg)


enamldef DNDWindow(MainWindow):

    attr parser
    attr latencies

    initial_size = (600, 900)

    Container:

        DockArea: dock_area:
            name = 'dock_area'
            features = Feature.DropEnabled

            drag_enter => (event):
                if event.mime_data().has_format('text/uri-list'):
                    event.accept_proposed_action()

            drop => (event):
                text = event.mime_data().data('text/uri-list').decode('utf-8')
                filenames = []
                for t in text.strip().split('\n'):
                    t = urllib.parse.unquote(t).strip()
                    fragments = urllib.parse.urlsplit(t)
                    path = fragments.path
                    filenames.append(path)
                load_files(parser, latencies, filenames, dock_area)
