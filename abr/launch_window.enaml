from pathlib import Path
import subprocess

from atom.api import Atom, Bool, Enum, Int, List, Str, Typed

from enaml.core.api import Looper
from enaml.layout.api import align, hbox, spacer, vbox
from enaml.stdlib.fields import IntField
from enaml.stdlib.message_box import warning, information
from enaml.validator import Validator
from enaml.widgets.api import (CheckBox, Container, Field, FileDialogEx,
                               HGroup, Label, MainWindow, ObjectCombo,
                               PushButton)

from abr import main_icon
from abr.parsers import PARSER_MAP


class Settings(Atom):

    analyzer = Str()
    waves = List()
    filter_data = Bool(True)
    shuffle = Bool(True)
    filter_lb = Int(300)
    filter_ub = Int(3000)
    last_directory = Str()
    parser = Enum(*list(PARSER_MAP.keys()))

    calibration_file = Typed(Path, ())
    latency_file = Typed(Path, ())

    def get_default_args(self):
        args = ['--parser', self.parser]
        args.extend(['--user', self.analyzer])
        if self.filter_data:
            args.extend(['--highpass', str(self.filter_lb)])
            args.extend(['--lowpass', str(self.filter_ub)])
        else:
            args.append('--nofilter')
        if self.waves:
            args.append('--waves')
            args.extend(str(w) for w in self.waves)
        else:
            args.append('--threshold-only')
        return args

    def launch_basic(self):
        args = ['abr_gui']
        args.extend(self.get_default_args())
        result = subprocess.check_output(args)

    def launch_batch(self):
        directory = FileDialogEx.get_existing_directory(current_path=self.last_directory)
        if not directory:
            return

        self.last_directory = directory
        args = ['abr_batch', '--skip-errors']
        args.append(directory)
        args.extend(self.get_default_args())
        if self.shuffle:
            args.append('--shuffle')

        result = subprocess.check_output(args)
        if result.decode().strip() == 'No files to process':
            mesg = 'No ABR experiments found in {}'.format(directory)
            information(None, 'No data', mesg)


class AnalyzerValidator(Validator):

    def validate(self, text):
        return bool(text)


enamldef LaunchWindow(MainWindow): window:

    title = 'ABR analysis'
    icon = main_icon

    attr settings = Settings(waves=[1])

    Container:

        constraints << [
            vbox(
                hbox(a_label, a_field),
                hbox(p_label, p_field),
                hbox(calfile_label, calfile_field, calfile_button),
                hbox(latency_label, latency_field, latency_button),
                hbox(m_label, waves),
                hbox(do_filter, filter_lb, l_filter_to, filter_ub, l_filter_end),
                hbox(b_basic, b_loop),
            ),
            align('width', a_label, m_label, p_label, calfile_label, latency_label, do_filter),
            align('left', a_field, p_field, calfile_field, latency_field, waves, filter_lb),
            align('width', b_basic, b_loop),
            align('v_center', m_label, waves),
            align('v_center', calfile_label, calfile_field, calfile_button),
            align('v_center', latency_label, latency_field, latency_button),
            calfile_button.width == 30,
            latency_button.width == 30,
        ]

        Label: a_label:
            text = 'Analyzer'

        Field: a_field:
            text := settings.analyzer
            validator = AnalyzerValidator()
            placeholder = 'Your name or initials. Be consistent.'

        Label: m_label:
            text = 'Measure waves'
            align = 'center'

        Label: p_label:
            text = 'File format'

        ObjectCombo: p_field:
            items << list(PARSER_MAP.keys())
            selected := settings.parser
            to_string << PARSER_MAP.get

        HGroup: waves:
            spacing = 0
            padding = 0
            trailing_spacer = spacer(0)
            Looper:
                iterable << range(1, 6)
                CheckBox:
                    text = str(loop_item)
                    checked << loop_item in settings.waves[:]
                    checked ::
                        if checked:
                            settings.waves.append(loop_item)
                        else:
                            settings.waves.remove(loop_item)

        CheckBox: do_filter:
            text = 'Filter?'
            checked := settings.filter_data

        Label: l_filter_to:
            text = 'to'
            visible << do_filter.checked

        Label: l_filter_end:
            text = 'Hz'
            visible << do_filter.checked

        IntField: filter_lb:
            visible << do_filter.checked
            value := settings.filter_lb

        IntField: filter_ub:
            visible << do_filter.checked
            value := settings.filter_ub

        PushButton: b_basic:
            text = 'Launch basic'
            enabled << bool(settings.analyzer)
            clicked ::
                settings.launch_basic()

        PushButton: b_loop:
            text = 'Batch mode'
            enabled << bool(settings.analyzer)
            clicked ::
                settings.launch_batch()

        Label: calfile_label:
            text = 'Calibration file'

        Label: calfile_field:
            text << str(settings.calibration_file)

        PushButton: calfile_button:
            text = 'ðŸ—Ž'
            clicked ::
                filters =['Spreadsheet (*.csv, *.xls, *.xlsx)']
                result = FileDialogEx.get_open_file_name(
                    parent=window, current_path=str(settings.calibration_file),
                    name_filters=filters)
                if result:
                    settings.calibration_file = Path(result)

        Label: latency_label:
            text = 'Summary file'

        Label: latency_field:
            text << str(settings.latency_file)

        PushButton: latency_button:
            text = 'ðŸ—Ž'
            clicked ::
                filters =['Spreadsheet (*.csv, *.xls, *.xlsx)']
                result = FileDialogEx.get_open_file_name(
                    parent=window, current_path=str(settings.latency_file),
                    name_filters=filters)
                if result:
                    settings.latency_file = Path(result)


enamldef SummarizeWindow(MainWindow): window:

    title = 'ABR analysis summary'
    icon = main_icon

    Container:

        constraints << [
            vbox(
                hbox(input_label, input_field, input_button),
                hbox(output_label, output_field, output_button),
            ),
            align('v_center', input_label, input_field, input_button),
            align('v_center', output_label, output_field, output_button),
            input_button.width == 30,
            output_button.width == 30,
        ]

        Label: input_label:
            text = 'Folder to summarize'

        Label: input_field:
            pass

        PushButton: input_button:
            text = 'ðŸ—Ž'
            clicked ::
                result = FileDialogEx.get_existing_directory(
                    parent=window,
                )
                if result:
                    print('foo')

        Label: output_label:
            text = 'Output file'

        Label: output_field:
            pass

        PushButton: output_button:
            text = 'ðŸ—Ž'
            clicked ::
                result = FileDialogEx.get_save_file_name(
                    parent=window,
                )
                if result:
                    print('foo')
